# This script has two MQTT topics: "alarm/turned_off" and "alarm/email_registration".
# It handles alarm turn-off events and email registrations.

# MQTT Settings
mqtt_broker = "your_mosquitto_broker_address"
mqtt_topic_alarm = "alarm/turned_off"
mqtt_topic_registration = "alarm/email_registration"

# Email Settings
smtp_server = "your_smtp_server"
smtp_port = 587
sender_email = "your_sender_email"
sender_password = "your_sender_password"

# Dictionary to store email addresses
recipient_emails = {}

# MQTT Callbacks
def on_message_alarm(client, userdata, msg):
    # Handle the received alarm message, e.g., send emails to registered recipients
    for recipient_email in recipient_emails.values():
        send_email(recipient_email, "Alarm Turned Off", f"The alarm was turned off at {msg.payload.decode()}")

def on_message_registration(client, userdata, msg):
    # Handle the received registration message, e.g., add email to the dictionary
    client_id = msg.topic.split("/")[-1]  # Extract client ID from the topic
    recipient_emails[client_id] = msg.payload.decode()

# Email Function
def send_email(recipient, subject, body):
    with smtplib.SMTP(smtp_server, smtp_port) as server:
        server.starttls()
        server.login(sender_email, sender_password)
        message = f"Subject: {subject}\n\n{body}"
        server.sendmail(sender_email, recipient, message)

# MQTT Client Setup
client = mqtt.Client()
client.connect(mqtt_broker, 1883, 60)

# Subscribe to the alarm topic
client.subscribe(mqtt_topic_alarm)
client.on_message = on_message_alarm

# Subscribe to the registration topic
client.subscribe(mqtt_topic_registration + "/#")  # Subscribe to all subtopics under registration
client.message_callback_add(mqtt_topic_registration + "/#", on_message_registration)

# Start the MQTT loop
client.loop_start()

# Keep the program running
try:
    while True:
        pass
except KeyboardInterrupt:
    print("Program terminated.")
    client.loop_stop()
